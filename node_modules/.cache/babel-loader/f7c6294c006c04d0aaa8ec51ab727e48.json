{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ehab/Downloads/React Covid-19 new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ehab/Downloads/React Covid-19 new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/ehab/Downloads/React Covid-19 new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from\"react\";import getTotalAmount from\"../util/getTotalAmount\";var useFetch=function useFetch(url){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isLoading=_useState2[0],setIsLoading=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),hasError=_useState4[0],setHasError=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),badRequest=_useState6[0],setBadRequest=_useState6[1];var _useState7=useState(),_useState8=_slicedToArray(_useState7,2),data=_useState8[0],setData=_useState8[1];var fetchData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,result,_data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;setIsLoading(true);_context.next=4;return fetch(url);case 4:response=_context.sent;_context.next=7;return response.json();case 7:result=_context.sent;if(!response.ok){_context.next=15;break;}_context.next=11;return getTotalAmount(result);case 11:_data=_context.sent;setData(_data);_context.next=16;break;case 15:setBadRequest(true);case 16:_context.next=21;break;case 18:_context.prev=18;_context.t0=_context[\"catch\"](0);setHasError(true);case 21:_context.prev=21;setIsLoading(false);return _context.finish(21);case 24:case\"end\":return _context.stop();}}},_callee,null,[[0,18,21,24]]);}));return function fetchData(){return _ref.apply(this,arguments);};}();useEffect(function(){fetchData();},[url]);return{isLoading:isLoading,badRequest:badRequest,hasError:hasError,data:data};};export default useFetch;","map":{"version":3,"sources":["/Users/ehab/Downloads/React Covid-19 new/src/components/useFetch.js"],"names":["useState","useEffect","getTotalAmount","useFetch","url","isLoading","setIsLoading","hasError","setHasError","badRequest","setBadRequest","data","setData","fetchData","fetch","response","json","result","ok"],"mappings":"0dAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,MAAOC,CAAAA,cAAP,KAA2B,wBAA3B,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,GAAD,CAAS,eACUJ,QAAQ,CAAC,KAAD,CADlB,wCACjBK,SADiB,eACNC,YADM,8BAEQN,QAAQ,CAAC,KAAD,CAFhB,yCAEjBO,QAFiB,eAEPC,WAFO,8BAGYR,QAAQ,CAAC,KAAD,CAHpB,yCAGjBS,UAHiB,eAGLC,aAHK,8BAIAV,QAAQ,EAJR,yCAIjBW,IAJiB,eAIXC,OAJW,eAMxB,GAAMC,CAAAA,SAAS,0FAAG,6KAEdP,YAAY,CAAC,IAAD,CAAZ,CAFc,sBAGSQ,CAAAA,KAAK,CAACV,GAAD,CAHd,QAGRW,QAHQ,qCAIOA,CAAAA,QAAQ,CAACC,IAAT,EAJP,QAIRC,MAJQ,mBAKVF,QAAQ,CAACG,EALC,iDAMOhB,CAAAA,cAAc,CAACe,MAAD,CANrB,SAMNN,KANM,eAOZC,OAAO,CAACD,KAAD,CAAP,CAPY,+BASZD,aAAa,CAAC,IAAD,CAAb,CATY,yFAYdF,WAAW,CAAC,IAAD,CAAX,CAZc,yBAcdF,YAAY,CAAC,KAAD,CAAZ,CAdc,sGAAH,kBAATO,CAAAA,SAAS,0CAAf,CAkBAZ,SAAS,CAAC,UAAM,CACdY,SAAS,GACV,CAFQ,CAEN,CAACT,GAAD,CAFM,CAAT,CAIA,MAAO,CAAEC,SAAS,CAATA,SAAF,CAAaI,UAAU,CAAVA,UAAb,CAAyBF,QAAQ,CAARA,QAAzB,CAAmCI,IAAI,CAAJA,IAAnC,CAAP,CACD,CA7BD,CA+BA,cAAeR,CAAAA,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport getTotalAmount from \"../util/getTotalAmount\";\r\n\r\nconst useFetch = (url) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [hasError, setHasError] = useState(false);\r\n  const [badRequest, setBadRequest] = useState(false);\r\n  const [data, setData] = useState();\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await fetch(url);\r\n      const result = await response.json();\r\n      if (response.ok) {\r\n        const data = await getTotalAmount(result);\r\n        setData(data);\r\n      } else {\r\n        setBadRequest(true);\r\n      }\r\n    } catch {\r\n      setHasError(true);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [url]);\r\n\r\n  return { isLoading, badRequest, hasError, data };\r\n};\r\n\r\nexport default useFetch;\r\n"]},"metadata":{},"sourceType":"module"}